<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ppumang's dev blog - ppumang&apos;s dev blog</title>
    <description>blockchain, web, machine learning</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Oct 2022 16:43:30 +0900</pubDate>
    <lastBuildDate>Fri, 07 Oct 2022 16:43:30 +0900</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>ppumang's dev blog - Ethereum&apos;s roadmap</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article is scrapped from “Mastering Ethereum”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ethereum’s development was planned over four distinct stages.&lt;br /&gt;
&lt;strong&gt;Frontier&lt;/strong&gt;, &lt;strong&gt;Homestead&lt;/strong&gt;, &lt;strong&gt;Metropolis&lt;/strong&gt;, and &lt;strong&gt;Serenity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Block #0
&lt;strong&gt;Frontier&lt;/strong&gt; — The initial stage of Ethereum, lasting from July 30, 2015, to March 2016.&lt;/p&gt;

&lt;p&gt;Block #200,000
Ice Age — A hard fork to introduce an exponential difficulty increase, to motivate a transition to PoS when ready.&lt;/p&gt;

&lt;p&gt;Block #1,150,000
&lt;strong&gt;Homestead&lt;/strong&gt; — The second stage of Ethereum, launched in March 2016.&lt;/p&gt;

&lt;p&gt;Block #1,192,000
DAO — A hard fork that reimbursed victims of the hacked DAO contract and caused Ethereum and Ethereum Classic to split into two competing systems.&lt;/p&gt;

&lt;p&gt;Block #2,463,000
Tangerine Whistle — A hard fork to change the gas calculation for certain I/O-heavy operations and to clear the accumulated state from a denial-of-service (DoS) attack that exploited the low gas cost of those operations.&lt;/p&gt;

&lt;p&gt;Block #2,675,000
Spurious Dragon — A hard fork to address more DoS attack vectors, and another state clearing. Also, a replay attack protection mechanism.&lt;/p&gt;

&lt;p&gt;Block #4,370,000
&lt;strong&gt;Metropolis Byzantium&lt;/strong&gt; — Metropolis is the third stage of Ethereum. Launched in October 2017, Byzantium is the first part of Metropolis, adding low-level functionalities and adjusting the block reward and difficulty.&lt;/p&gt;

&lt;p&gt;Block #7,280,000
Constantinople / St. Petersburg — Constantinople was planned to be the second part of Metropolis with similar improvements. A few hours before its activation, a critical bug was discovered. The hard fork was therefore postponed and renamed St. Petersburg.&lt;/p&gt;

&lt;p&gt;Block #9,069,000
Istanbul — An additional hard fork with the same approach, and naming convention, as for the prior two.&lt;/p&gt;

&lt;p&gt;Block #9,200,000
Muir Glacier — A hard fork whose sole purpose was to adjust the difficulty again due to the exponential increase introduced by Ice Age.&lt;/p&gt;

&lt;p&gt;In 2022-10-07, Ethereum’s block height is 15,694,029&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0900</pubDate>
        <link>/Ethereum's-roadmap/</link>
        <guid isPermaLink="true">/Ethereum's-roadmap/</guid>
        
        
      </item>
    
      <item>
        <title>ppumang's dev blog - Ethereum&apos;s components</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article is scrapped from “Mastering Ethereum”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;P2P network&lt;/strong&gt; &lt;br /&gt;
Ethereum runs on the Ethereum main network, which is addressable on TCP port 30303, and runs a protocol called ÐΞVp2p.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consensus rules&lt;/strong&gt; &lt;br /&gt;
Ethereum’s consensus rules are defined in the reference specification, the &lt;strong&gt;&lt;a href=&quot;https://ethereum.github.io/yellowpaper/paper.pdf&quot;&gt;Yellow Paper&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transactions&lt;/strong&gt;&lt;br /&gt;
Ethereum transactions are network messages that include (among other things) a sender, recipient, value, and data payload.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State machine&lt;/strong&gt;&lt;br /&gt;
Ethereum state transitions are processed by the Ethereum Virtual Machine (EVM), a stack-based virtual machine that executes bytecode (machine-language instructions). EVM programs, called “smart contracts,” are written in high-level languages (e.g., Solidity) and compiled to bytecode for execution on the EVM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data structures&lt;/strong&gt;&lt;br /&gt;
Ethereum’s state is stored locally on each node as a database (usually Google’s LevelDB), which contains the transactions and system state in a serialized hashed data structure called a &lt;strong&gt;Merkle Patricia Tree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consensus algorithm&lt;/strong&gt;&lt;br /&gt;
Ethereum uses Bitcoin’s consensus model, Nakamoto Consensus, which uses sequential single-signature blocks, weighted in importance by PoW to determine the longest chain and therefore the current state. However, there are plans to move to a PoS weighted voting system, codenamed Casper, in the near future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Economic security&lt;/strong&gt;&lt;br /&gt;
Ethereum currently uses a PoW algorithm called Ethash, but this will eventually be dropped with the move to PoS at some point in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clients&lt;/strong&gt;&lt;br /&gt;
Ethereum has several interoperable implementations of the client software, the most prominent of which are Go-Ethereum (Geth) and Parity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Ethereum finalized ‘&lt;strong&gt;The Merge&lt;/strong&gt;’ at block #15,537,393 on September 15, 2022, at 1:42:42 EST. Which means that Ethereum has moved from PoW to PoS. Instead of mining, Ethereum will rely on stakers to secure the network.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0900</pubDate>
        <link>/Ethereum's-components/</link>
        <guid isPermaLink="true">/Ethereum's-components/</guid>
        
        
      </item>
    
      <item>
        <title>ppumang's dev blog - How is ethereum different from bitcoin?</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article is scrapped from “Mastering Ethereum”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ethereum’s purpose is not primarily to be a digital currency payment network.&lt;/p&gt;

&lt;p&gt;While the digital currency &lt;strong&gt;ether&lt;/strong&gt; is intended as a &lt;strong&gt;utility currency&lt;/strong&gt; to pay for use of the Ethereum platform as the world computer.&lt;/p&gt;

&lt;p&gt;Ethereum is designed to be a &lt;strong&gt;general-purpose programmable blockchain&lt;/strong&gt; that runs a virtual machine capable of executing code of arbitrary and unbounded complexity.&lt;/p&gt;

&lt;p&gt;Ethereum’s language is &lt;strong&gt;Turing complete&lt;/strong&gt;, meaning that Ethereum can straightforwardly function as a general-purpose computer.&lt;/p&gt;

&lt;p&gt;The Ethereum platform was designed to abstract detailed implementations of peer-to-peer networks, blockchains, consensus algorithms, etc… providing a deterministic and secure programming environment for decentralized blockchain applications.&lt;/p&gt;

&lt;p&gt;While bitcoin keeps track of bitcoin’s ownership, ethereum tracks the &lt;strong&gt;state transition&lt;/strong&gt; of a general-purpose data store, which is stored in key-value tuple.&lt;/p&gt;

&lt;p&gt;Ethereum can load code into its state machine and run that code, storing the resulting state changes in its blockchain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;About Turing completeness&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Turing machine is a machine composed of memory, head, state and symbols. Head reads memory from left to right, performing jobs pre-determined by symbols, and overwrites the state in it’s position.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If a machine is Turing-complete, it means it can simulate any Turing machine.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Due to the fact that it can simulate any programs, Turing-complete machines can be stuck in infinite loops or computation that needs huge resoureces. And it is also proven that we cannot predict whether a program will end in finite time or not.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To solve this problem, Ethereum introduced the concept of &lt;strong&gt;gas&lt;/strong&gt;. While running a smart contract, in each operations( computations, data access, etc. ), a pre-defined amount of gas is used. When sending transaction to trigger execution, a user has to set a &lt;strong&gt;gas limit&lt;/strong&gt;. If a gas used in execution exceeds the gas limit, the EVM will terminate the execution, leaving the state unchanged.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2022 00:00:00 +0900</pubDate>
        <link>/How-is-Ethereum-different-from-Bitcoin/</link>
        <guid isPermaLink="true">/How-is-Ethereum-different-from-Bitcoin/</guid>
        
        
      </item>
    
      <item>
        <title>ppumang's dev blog - What happens if two independent blocks are created at the same time?</title>
        <description>&lt;p&gt;Every nodes should reach a consensus and save same transactions, same blocks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/fork_consensus.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;A bitcoin network that reached consensus, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;When mining bitcoin, if a mining block finds the correct nonce, it propagates a new block( block A ) to other nodes.&lt;/p&gt;

&lt;p&gt;If a mining node receives a propagated block( block A ) before finding the nonce, it stops current POW and start POW of the block after the received block.&lt;/p&gt;

&lt;p&gt;It takes time for a new block to propagate to every nodes. So, before it’s propagated to every node, another node that hasn’t received the new node might succeed in POW, and start propagating another new block( block B ).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/fork_conflict.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;propagating to different blocks, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;In this case, some nodes receives block A before block B, while some nodes receives block B before block A. When this happens, a bitcoin network is &lt;strong&gt;forked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/fork_conflict2.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;A forked bitcoin network, &quot;bitcoin book&quot; &lt;/figcaption&gt;

&lt;p&gt;Which block should be selected? block A or block B?&lt;/p&gt;

&lt;p&gt;Mining nodes doesn’t care if the network is forked or not. They just keep mining the next node.&lt;/p&gt;

&lt;p&gt;Let’s say a mining node succeeded POW, made new block ( block C ) on top of block A, and propagated it to other nodes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/fork_resolving.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Block C is mined and propagated, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;When a node receives block C lengthening block A, the blockchain with block A is longer than the blockchain with block B. This makes blockchain with block A more &lt;strong&gt;credible&lt;/strong&gt; then the other. So the node chooses blockchain with block A, and fork is resolved.&lt;/p&gt;

&lt;p&gt;Block that has not been chosen is called an &lt;strong&gt;orphan block&lt;/strong&gt; or &lt;strong&gt;stale block&lt;/strong&gt;. In this case, block B is an orphan block.&lt;/p&gt;

&lt;p&gt;Conventionally, if a network is forked, a node chooses the longest one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/fork_resolved.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Fork resolved, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;Although blockchain with block B is one height shorter then block A, it still has chance to become longer then blockchain with block A.&lt;/p&gt;

&lt;p&gt;It’s a common sense that if block height differs more than 5 blocks, it’s almost impossible for defeated chain to win.&lt;/p&gt;

&lt;p&gt;So, if a block has more than 5 blocks on top of it, it’s considered &lt;strong&gt;safe&lt;/strong&gt;, meaning that it will not be defeated by another forked blockchain.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2022 00:00:00 +0900</pubDate>
        <link>/What-happens-if-two-independent-blocks-are-created-at-the-same-time/</link>
        <guid isPermaLink="true">/What-happens-if-two-independent-blocks-are-created-at-the-same-time/</guid>
        
        
      </item>
    
      <item>
        <title>ppumang's dev blog - How are bitcoin wallets made?</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;For simplicity, only Type 2 Hierarchical Deterministic Wallets are considered&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Bitcoin, &lt;strong&gt;wallet&lt;/strong&gt; is a software that manages &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A user needs private key and public key to use bitcoin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/t2_deterministic.png&quot; title=&quot;px(픽셀) 크기 설정&quot; alt=&quot;deterministic wallets&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Private key generating in Hierarchical Deterministic Wallets, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;A seed generates a master private key, and each private key can generate multiple child private key.&lt;/p&gt;

&lt;p&gt;Each private key is used to make a seperate account.&lt;/p&gt;

&lt;p&gt;Seeds are represented as word phrases like this.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    army van defense carry jealous true
    garbage claim echo media make crunch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bitcoin addresses and public keys are generated from private key by applying one way hash function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/pvkey_pubkey_addr.png&quot; title=&quot;px(픽셀) 크기 설정&quot; alt=&quot;private key to address&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;How public key and Bitcoin address is generated from private key, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;Private keys are generated as random 256byte integer.&lt;/p&gt;

&lt;p&gt;The one way hash functions bitcoin uses for encryptions includes Elliptic Curve Cryptography, modular prime number p operation, SHA-256, RIPEMD160… and so on. We will cover the math inside it in future articles.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2022 00:00:00 +0900</pubDate>
        <link>/How-are-bitcoin-wallets-made/</link>
        <guid isPermaLink="true">/How-are-bitcoin-wallets-made/</guid>
        
        
      </item>
    
      <item>
        <title>ppumang's dev blog - How does bitcoin network work?</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;for simplicity, this article only deals with full node, P2PKH&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/bitcoin_overview.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Bitcoin overview, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;Bitcoin network is maintained by nodes.&lt;/p&gt;

&lt;p&gt;Just as the internet runs on http protocol, bitcoin nodes interact with each other on bitcoin protocol.&lt;/p&gt;

&lt;p&gt;Nodes are computers that are running bitcoin software.&lt;/p&gt;

&lt;p&gt;Each node( full node ) saves a copy of bitcoin transaction data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“coin”&lt;/strong&gt; or &lt;strong&gt;“balance”&lt;/strong&gt; does not exist in bitcoin. Instead, bitcoin saves &lt;strong&gt;transactions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With transaction data, bitcoin software can calculate &lt;strong&gt;UTXO&lt;/strong&gt;( Unspent Transaction Output ) to prove how much bitcoins an address owns.&lt;/p&gt;

&lt;p&gt;Each UTXO can only be spent by a specific user.&lt;/p&gt;

&lt;p&gt;Transfering a bitcoin from one address to another means to eventually generate a new transaction.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// how a transaction data looks like&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;locktime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;txid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scriptSig&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967295&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scriptPubKey&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scriptPubKey&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/utxo.png&quot; title=&quot;px(픽셀) 크기 설정&quot; alt=&quot;gaori&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;How UTXO set changes as transactions occur overtime, &quot;bitcoin book&quot;&lt;/figcaption&gt;

&lt;p&gt;This is a brief summary of what happens when person X transfers 300 bitcoins to person Y.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search through every transactions that exists ( since the genesis block )&lt;/li&gt;
  &lt;li&gt;For each transaction, generate signature with X’s private key and the transaction data. Combine this signature and X’s public key to generate an unlocking script( scriptSig )&lt;/li&gt;
  &lt;li&gt;Combine this unlocking script( scriptSig ) with the transaction’s output’s locking script( scriptPubKey ) to prove that X can spend that transaction’s output&lt;/li&gt;
  &lt;li&gt;X should also prove that the output is unspent, iterating through every blocks&lt;/li&gt;
  &lt;li&gt;If proven that X can spend the transaction’s output and the output is unspent, that output is added to X’s UTXO pool&lt;/li&gt;
  &lt;li&gt;After iterating through every transactions, pick UTXOs from X’s UTXO pool to use as inputs of a new transaction. The sum of outputs’ value should exceed the amount to transfer, which in this case, is 300&lt;/li&gt;
  &lt;li&gt;Let’s say that X picked a input from a transaction that has value 400 as its output&lt;/li&gt;
  &lt;li&gt;X need to transfer 300 bitcoins to Y, so one output has value 300, which can only be spent by Y later, and another output( change ) has value 100, which can only be spent by X later ( transaction fee is not considered for simplicity )&lt;/li&gt;
  &lt;li&gt;Now that transaction data is made, it is broadcasted to other nodes through bitcoin protocol&lt;/li&gt;
  &lt;li&gt;When mining nodes receive this transaction data, they add the data to their mempool( transaction pool )&lt;/li&gt;
  &lt;li&gt;When a mining node includes the transaction to their candidate block’s transactions list and wins the competition, the transaction is now recorded in bitcoin chain forever&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process seems inefficient with all the iterations.
This inefficiency is a result of trade-off with decentralization, but in some level, this inefficiency can be reduced by using caches and data structures, which we will cover in future articles.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Oct 2022 00:00:00 +0900</pubDate>
        <link>/How-does-bitcoin-network-work/</link>
        <guid isPermaLink="true">/How-does-bitcoin-network-work/</guid>
        
        
      </item>
    
  </channel>
</rss>