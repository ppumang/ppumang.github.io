<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-10-05T15:06:56+09:00</updated><id>/feed.xml</id><title type="html">ppumang’s dev blog</title><subtitle>An amazing website.</subtitle><author><name>ppumang</name></author><entry><title type="html">So how are bicoin wallets made?</title><link href="/So-how-are-bicoin-wallets-made/" rel="alternate" type="text/html" title="So how are bicoin wallets made?" /><published>2022-10-05T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><id>/So%20how%20are%20bicoin%20wallets%20made</id><content type="html" xml:base="/So-how-are-bicoin-wallets-made/"><![CDATA[]]></content><author><name>ppumang</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">So how does bitcoin network work?</title><link href="/So-how-does-bitcoin-network-work/" rel="alternate" type="text/html" title="So how does bitcoin network work?" /><published>2022-10-05T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><id>/So%20how%20does%20bitcoin%20network%20work</id><content type="html" xml:base="/So-how-does-bitcoin-network-work/"><![CDATA[<blockquote>
  <p>for simplicity, this article only deals with full node, P2PKH</p>
</blockquote>

<ul>
  <li>Bitcoin network is maintained by nodes.</li>
  <li>Just as the internet runs on http protocol, bitcoin nodes interact with each other on bitcoin protocol</li>
  <li>Nodes are computers that are running bitcoin software</li>
  <li>Each node( full node ) saves a copy of bitcoin transaction data</li>
  <li><strong>“coin”</strong> or <strong>“balance”</strong> does not exist in bitcoin</li>
  <li>Instead, bitcoin saves transactions. With transaction data, bitcoin software can calculate <strong>UTXO</strong>( Unspent Transaction Output ) to prove how much bitcoins an address owns</li>
  <li>Each UTXO can only be spent by a specific user</li>
  <li>Transfering a bitcoin from one address to another means to eventually generate a new transaction
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// how a transaction data looks like</span>
<span class="p">{</span>
<span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="dl">"</span><span class="s2">locktime</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
<span class="dl">"</span><span class="s2">vin</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">txid</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">vout</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">scriptSig</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">sequence</span><span class="dl">"</span><span class="p">:</span> <span class="mi">4294967295</span>
  <span class="p">}</span>
<span class="p">],</span>
<span class="dl">"</span><span class="s2">vout</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">scriptPubKey</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">scriptPubKey</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">]</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>This is a brief summary of what happens when person X transfers 300 bitcoins to person Y.
    <ol>
      <li>Search through every transactions that exists ( since the genesis block )</li>
      <li>For each transaction, generate signature with X’s private key and the transaction data. Combine this signature and X’s public key to generate an unlocking script( scriptSig )</li>
      <li>Combine this unlocking script( scriptSig ) with the transaction’s output’s locking script( scriptPubKey ) to prove that X can spend that transaction’s output</li>
      <li>X should also prove that the output is unspent, iterating through every blocks</li>
      <li>If proven that X can spend the transaction’s output and the output is unspent, that output is added to X’s UTXO pool</li>
      <li>After iterating through every transactions, pick UTXOs from X’s UTXO pool to use as inputs of a new transaction. The sum of outputs’ value should exceed the amount to transfer, which in this case, is 300</li>
      <li>Let’s say that X picked a input from a transaction that has value 400 as its output</li>
      <li>X need to transfer 300 bitcoins to Y, so one output has value 300, which can be only spent by Y later, and another output( change ) has value 100, which can be only spent by X later ( transaction fee is not considered for simplicity )</li>
      <li>Now that transaction data is made, it is broadcasted to other nodes through bitcoin protocol</li>
      <li>When mining nodes receive this transaction data, they add the data to their mempool</li>
      <li>When a mining node includes the transaction to their candidate block’s transactions list and it wins the competition, the transaction is now recorded in bitcoin chain forever</li>
    </ol>
  </li>
  <li>This process seems inefficient with all the iterations</li>
  <li>This inefficiency is a result of trade-off with decentralization, but in some level, this inefficiency can be reduced by using caches and data structures, which we will cover in future articles</li>
</ul>]]></content><author><name>ppumang</name></author><summary type="html"><![CDATA[for simplicity, this article only deals with full node, P2PKH]]></summary></entry><entry><title type="html">Markdown</title><link href="/markdown/" rel="alternate" type="text/html" title="Markdown" /><published>2022-01-01T00:00:00+09:00</published><updated>2022-01-01T00:00:00+09:00</updated><id>/markdown</id><content type="html" xml:base="/markdown/"><![CDATA[<h1 id="this-is-an-h1">This is an H1</h1>

<h2 id="this-is-an-h2">This is an H2</h2>

<h1 id="this-is-a-h1">This is a H1</h1>
<h2 id="this-is-a-h2">This is a H2</h2>
<h3 id="this-is-a-h3">This is a H3</h3>
<h4 id="this-is-a-h4">This is a H4</h4>
<h5 id="this-is-a-h5">This is a H5</h5>
<h6 id="this-is-a-h6">This is a H6</h6>

<blockquote>
  <p>This is a first blockqute.
<!-- >	> This is a second blockqute.
	>	> This is a third blockqute. --></p>
</blockquote>

<ol>
  <li>첫번째</li>
  <li>두번째</li>
  <li>세번째</li>
</ol>

<ul>
  <li>빨강
    <ul>
      <li>녹색
        <ul>
          <li>파랑</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>빨강
    <ul>
      <li>녹색
        <ul>
          <li>파랑</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>빨강
    <ul>
      <li>녹색
        <ul>
          <li>파랑</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>1단계
    <ul>
      <li>2단계
        <ul>
          <li>3단계
            <ul>
              <li>4단계</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>hello
    <ul>
      <li>hello
        <ul>
          <li>hello</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>This is a normal paragraph:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is a code block.
</code></pre></div></div>

<p>end code block.</p>

<pre>
<code>
public class BootSpringBootApplication {
  public static void main(String[] args) {
    System.out.println("Hello, Honeymon");
  }

}
</code>
</pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class BootSpringBootApplication {
  public static void main(String[] args) {
    System.out.println("Hello, Honeymon");
  }
}
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BootSpringBootApplication</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, Honeymon"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<hr />

<hr />

<hr />

<hr />

<p><a href="URL" title="Optional Title here">link keyword</a></p>

<p>Link: <a href="https://google.com" title="Go google">Google</a></p>

<ul>
  <li>외부링크: <a href="http://example.com/">http://example.com/</a></li>
  <li>이메일링크: <a href="mailto:address@example.com">address@example.com</a></li>
</ul>

<p><em>single asterisks</em></p>

<p><em>single underscores</em></p>

<p><strong>double asterisks</strong></p>

<p><strong>double underscores</strong></p>

<p><del>cancelline</del></p>

<p><img src="/assets/images/gaori.png" alt="Alt text" /></p>

<p><img src="../assets/images/gaori.png" height="300px" title="px(픽셀) 크기 설정" alt="gaori" /><br /></p>]]></content><author><name>ppumang</name></author><summary type="html"><![CDATA[This is an H1]]></summary></entry></feed>